import { ethers }  from 'ethers';
const fs = require("fs");
require('dotenv').config({ path: 'src/RawTX/.env' });

const abiPath = "src/ABIS/nativeAdapter.json"; 
const contractABI = JSON.parse(fs.readFileSync(abiPath, "utf8"));
const hexValue = "0x15755916718000";
const valueInWei = ethers.BigNumber.from(hexValue);


async function sendSignedTransactionWithRawData() {
  const provider = new ethers.providers.JsonRpcProvider(process.env.PROVIDER_URL);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY as string, provider);

  const contractAddress = '0xFF92C3C393B22F9d26e5732F2601EaC04094880F';  // Replace with the contract address
  const value = valueInWei;  
  
  const rawData = '0x73c45c98000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d400000000000000000000000000000000000000000000000000000000001e84800000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000668a000000000000000000000000000000000000000000000000000000000000002407ee675f5a4db86b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000009a17fa0a2824ea855ec6ad3eab3aa2516ec6626d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003f9a68ff29b3d86a6928c44df171a984f61800090000000000000000000000003f9a68ff29b3d86a6928c44df171a984f6180009000000000000000000000000036cbd53842c5426634e7929541ec2318f3dcf7e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000a4391ea08c00000000000000000000000000000000000000000000000000000000000000600000000000000000000000009a17fa0a2824ea855ec6ad3eab3aa2516ec6626d00000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000000b4c697669755f54535430360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023078000000000000000000000000000000000000000000000000000000000000';

  const gasPrice = await provider.getGasPrice();
  const gasLimit = 500000;  
  const nonce = await provider.getTransactionCount(wallet.address);

  const tx = {
      to: contractAddress,
      value: value,  
      data: rawData,    
      gasPrice: gasPrice,
      gasLimit: ethers.utils.hexlify(gasLimit),
      nonce: nonce
  };

  // Sign the transaction with your wallet
  const signedTx = await wallet.signTransaction(tx);

  // Send the signed transaction
  const txResponse = await provider.sendTransaction(signedTx);
  console.log(`Transaction sent: ${txResponse.hash}`);

  // Wait for the transaction to be confirmed
  const receipt = await txResponse.wait();
  console.log(`Transaction confirmed in block: ${receipt.blockNumber}`);
}

sendSignedTransactionWithRawData().catch((error) => {
  console.error('Error sending transaction:', error);
});